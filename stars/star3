<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Final Transparent Sphere Scene</title>
  <style>body { margin: 0; overflow: hidden; }</style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.158.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.158.0/examples/js/cameras/CubeCamera.js"></script>

<script>
const scene = new THREE.Scene();
scene.background = new THREE.Color('#120030');

const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);
camera.position.set(0, 3, 12);

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.outputEncoding = THREE.sRGBEncoding;
document.body.appendChild(renderer.domElement);

// 星星背景
const stars = new THREE.BufferGeometry();
const starVerts = [];
for (let i = 0; i < 1200; i++) {
  starVerts.push((Math.random() - 0.5) * 200, Math.random() * 80, (Math.random() - 0.5) * 200);
}
stars.setAttribute('position', new THREE.Float32BufferAttribute(starVerts, 3));
const starMat = new THREE.PointsMaterial({ color: 0xffffff, size: 0.8 });
scene.add(new THREE.Points(stars, starMat));

// CubeCamera
const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(256, {
  format: THREE.RGBAFormat,
  generateMipmaps: true,
  minFilter: THREE.LinearMipmapLinearFilter
});
const cubeCamera = new THREE.CubeCamera(0.1, 1000, cubeRenderTarget);
scene.add(cubeCamera);

// 地板
const hex = new THREE.Mesh(
  new THREE.CylinderGeometry(4, 4, 0.5, 6),
  new THREE.MeshStandardMaterial({
    color: '#c4ccff',
    metalness: 0.6,
    roughness: 0.1,
    emissive: '#aabbff',
    emissiveIntensity: 0.3
  })
);
hex.rotation.y = Math.PI / 6;
hex.position.y = 1.65;  // 原 1.95 -0.3
scene.add(hex);

// reflective 球（亮藍紫）
const reflectiveSphere = new THREE.Mesh(
  new THREE.SphereGeometry(1.4, 64, 64),
  new THREE.MeshStandardMaterial({
    color: '#b0aaff',
    envMap: cubeRenderTarget.texture,
    metalness: 0.4,
    roughness: 0.1
  })
);
reflectiveSphere.position.set(2.3, 3.4, 0); // 原 3.7 -0.3
scene.add(reflectiveSphere);

// cube
const cube = new THREE.Mesh(
  new THREE.BoxGeometry(1.3, 1.3, 1.3),
  new THREE.MeshStandardMaterial({
    color: '#5533ff',
    emissive: '#2200ff',
    emissiveIntensity: 0.2
  })
);
cube.position.set(-2.3, 3.0, 0); // 原 3.3 -0.3
scene.add(cube);

// glass box
const glassBox = new THREE.Mesh(
  new THREE.BoxGeometry(0.4, 2.5, 0.4),
  new THREE.MeshStandardMaterial({
    color: 0x88bbff,
    metalness: 0.5,
    roughness: 0.05,
    transparent: true,
    opacity: 0.5
  })
);
glassBox.position.set(0, 3.5, -0.4); // 原 3.8 -0.3
glassBox.rotation.z = Math.PI / 4;
scene.add(glassBox);

// Transparent dome - 改進反射與邊緣視覺
const bigDome = new THREE.Mesh(
  new THREE.SphereGeometry(5.5, 64, 64),
  new THREE.MeshPhysicalMaterial({
    color: '#ffffff',
    metalness: 0.1,
    roughness: 0.05,
    transmission: 1.0,
    thickness: 2.5,
    ior: 1.4,
    envMap: cubeRenderTarget.texture,
    transparent: true,
    opacity: 0.25
  })
);
bigDome.position.set(0, 3.8, 0); // 原 4.1 -0.3
scene.add(bigDome);

// 背景 3 顆發光球
const glowColors = ['#ff88ff', '#66ccff', '#ffd966'];
const glowPositions = [
  [-12, 6, -25],
  [10, 5, -30],
  [0, 8, -40]
];

glowPositions.forEach((pos, i) => {
  const glow = new THREE.Mesh(
    new THREE.SphereGeometry(1.8, 32, 32),
    new THREE.MeshStandardMaterial({
      color: glowColors[i],
      emissive: glowColors[i],
      emissiveIntensity: 2,
      metalness: 0.2,
      roughness: 0.2
    })
  );
  glow.position.set(...pos);
  scene.add(glow);
});

// 光源
const light = new THREE.DirectionalLight(0xffffff, 1.2);
light.position.set(5, 15, 10);
scene.add(light);
scene.add(new THREE.AmbientLight(0xffffff, 0.6));

// 動畫
const clock = new THREE.Clock();
function animate() {
  requestAnimationFrame(animate);
  const t = clock.getElapsedTime();

  cube.rotation.y += 0.01;
  glassBox.rotation.y += 0.002;
  reflectiveSphere.rotation.y += 0.01;
  reflectiveSphere.position.y = 3.4 + Math.sin(t * 2) * 0.3;
  bigDome.rotation.y += 0.002;

  reflectiveSphere.visible = false; 
  cubeCamera.update(renderer, scene);
  reflectiveSphere.visible = true;

  renderer.render(scene, camera);
}
animate();

// Resize
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
</script>
</body>
</html>
